# -*- coding: utf-8 -*-
"""Cópia de Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTiZj5J7jP2-pUj5Y9Khof8LnUM9LP0l
"""

# Importamos as bibliotecas que vamos a utilizar
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# carregamos o arquivo
dados = pd.read_excel('/BaseDados_RegressaoLogistica.xlsx','Plan1')
dados.head()

# exploramos os dados ( estatísticamente agora)
dados.describe()

# análise exploratorio dos dados
dados.info()

# visualizamos os primeiros graficos para continuar explorando
sns.set(font_scale = 1.3, rc= {'figure.figsize':(20,20)})
eixo_x = dados.hist(bins = 20, color ='blue')



# bloxplot para explorar padrões 
plt.figure(figsize = (10,5) )
sns.boxplot(data = dados, x = 'Tipo Renda', y= 'Renda' );

plt.figure(figsize = (10,5) )
sns.boxplot(data = dados, x = 'Possui Imóvel', y= 'Renda' );

plt.figure(figsize = (10,5) )
sns.scatterplot( data = dados, x = 'Renda', y= 'Comprou?')

#separamos os dados em matrizes
caracteristica = dados.iloc[:,1:4].values
previsor = dados.iloc[:,4:5].values

caracteristica

previsor

# separamos os dados para treino e teste, em proporção de 20%
from sklearn.model_selection import train_test_split
x_treino,x_teste,y_treino,y_teste = train_test_split(caracteristica,
                                                     previsor,
                                                     test_size=0.20)

# utilizamos a função logística para o modelo
from sklearn.linear_model import LogisticRegression
funcaologistica = LogisticRegression()
funcaologistica.fit(x_treino,y_treino)

previsoes = funcaologistica.predict(x_teste)

previsoes

y_teste

# encotramos a matriz de confusão 
from sklearn.metrics import confusion_matrix
confusion_matrix(y_teste,previsoes)

from sklearn.metrics import classification_report
print(classification_report( y_teste,previsoes))

# agora pode carregar novos clientes y fazer previsões